import { Component, Fragment } from "react";
import * as CycloneModel from "../cyclonedx/models";
import { VulnerabilityReferenceListComponent } from "./VulnerabilityReferenceList.component";
import { VulnerabilityAffectedComponent } from "./VulnerabilityAffected.component";
import { CycloneDataLoader } from "../data/cyclone_data_loader";
import { VulnerabilityRatingsListComponent } from "./VulnerabilityRatingsList.component";
import { VulnerabilityAdvisoryComponent } from "./VulnerabilityAdvisory.component";
import ellipsize from "ellipsize";

type PropsType  = {
  vulnerability: CycloneModel.Vulnerability,
  dataLoader: CycloneDataLoader,
  searchValue: string;
}

type StateType = {
  shown: boolean;
}

export class VulnerabilityComponent extends Component<PropsType, StateType, any> {
  constructor(props: PropsType) {
    super(props);
    this.state = {
      shown: false
    };
  }

  toggleShow = () => {
    this.setState((s) => {
      return {...s, shown: !s.shown}
    });
  };

  formatScore() {
    if (this.props.vulnerability.ratings) {
      const ratings = this.props.vulnerability.ratings;
      if (ratings.length > 0) {
      const ratings = this.props.vulnerability.ratings!;
        let sortedScores = ratings.sort((a, b) => {
          const score_a = a.score ? a.score : 0.0;
          const score_b = b.score ? b.score : 0.0;
          return score_b - score_a;
        });
        return sortedScores[0].score ? sortedScores[0].score : 0.0;
      }
    }
    return "Unknown";
  }

  getClassName() : string {
    if (this.state.shown) {
      return "vuln-detail-shown";
    }
    return "vuln-detail-hidden";
  }

  formatTools() {
    if (this.props.vulnerability.tools) {
      const tools = this.props.vulnerability.tools;
      if (tools.components) {
        const comps = tools.components;
        if (comps.length > 0) {
          return comps.map(c => c.name).join(", ");
        }
      }
    }
    return "";
  }

  renderDetail() {
    if (this.props.vulnerability.detail) {
      return <div>
        <h3>Details</h3>
      <pre className="vuln-row-details-detail">{this.props.vulnerability.detail}</pre>
      </div>
    }
    return "";
  }

  showDescription() {
    if (this.props.vulnerability.description) {
      return this.props.vulnerability.description;
    }
    if (this.props.vulnerability.detail) {
      return ellipsize(this.props.vulnerability.detail, 80);
    }
    return "NO DESCRIPTION PROVIDED";
  }

  markPossible() {
    if (CycloneModel.isPossibleAssignment(this.props.vulnerability)) {
      return <strong>(P)</strong>;
    }
    return "";
  }

  affectedMatchList() : string[] {
    if (this.props.vulnerability.affects) {
      return this.props.vulnerability.affects.flatMap(a => {
        const c = this.props.dataLoader.componentHash.get(a.ref);
        if (c) {
          let searchables = [c.name];
          if (c.purl) {
            searchables.push(c.purl);
          }
          if (c.cpe) {
            searchables.push(c.cpe);
          }
          if (c.version) {
            searchables.push(c.version);
          }
          return searchables;
        }
        return [];
      })
    }
    return [];
  }

  matchClass() {
    let searchVisibility = "";
    if (this.props.searchValue !== "") {
      let didNotMatch = true;
      const searchString = this.props.searchValue.toLowerCase();
      if (this.showDescription().toLowerCase().indexOf(searchString) > -1) {
        didNotMatch = false;
      }
      if (this.props.vulnerability.detail) {
        if (this.props.vulnerability.detail.toLowerCase().indexOf(searchString) > -1) {
          didNotMatch = false;
        }
      }
      this.affectedMatchList().forEach((ami) => {
        if (ami.toLowerCase().indexOf(searchString) > -1) {
          didNotMatch = false;
        }
      });
      if (didNotMatch) {
        searchVisibility = " component-filtered";
      }
    }
    return searchVisibility;
  }

  render() {
    return (
    <Fragment>
    <tr key={"vuln-row-info" + this.props.vulnerability["bom-ref"]} className={"vuln-main-row" + this.matchClass()}>
      <td>{this.markPossible()}{this.props.vulnerability.id}</td>
      <td>{this.showDescription()}</td>
      <td>{CycloneModel.formatSeverity(this.props.vulnerability)}</td>
      <td>{this.formatScore()}</td>
      <td>{this.formatTools()}</td>
      <td className="table-detail-toggle" onClick={this.toggleShow}>Details</td>
    </tr>
    <tr key={"vuln-row-details" + this.props.vulnerability["bom-ref"]} className={this.getClassName() + this.matchClass()}>
      <td colSpan={5} className="vuln-row-details-content">
        <VulnerabilityRatingsListComponent vulnerability={this.props.vulnerability}/>
        <VulnerabilityAdvisoryComponent vulnerability={this.props.vulnerability}/>
        <VulnerabilityAffectedComponent vulnerability={this.props.vulnerability} dataLoader={this.props.dataLoader}/>
        <VulnerabilityReferenceListComponent vulnerability={this.props.vulnerability} />
        {this.renderDetail()}
      </td>
    </tr>
  </Fragment>);
  }
}